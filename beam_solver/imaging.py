import casa_utils as ct
import extract as ct
import pyuvdata
from astropy.time import Time

class Imaging(object):
    
    def __init__(self, dset=None, beam=None):
        """
        Dataset or miriad file visibilties and perform operations such as converting to MS format and generate images
    
        Parameters
        ----------
        dset : Miriad file 
            Miriad File  containing visibilities are required metadata.

        beam : string, optional
            Beam file containg the parameters and data for beam model

        """
        self.dset = dset
        self.beam = beam

    def convert_mset(self, phs=None):
        """
        Converts Miriad file to Measurement set
        
        Parameters
        ----------
        phs : float, optional
            Julian date at which to phase the visibilities. By default the visibilities are phased to first timestamp of the file

        """
        self.ms = self + '.ms'
        uvd = pyuvdata.UVData()
        uvd.read_miriad(self)
        times = uvd.time_array
        phs_time = times[0] if phs is None else phs

        print ('Phasing visibilities to {}'.format(phs_time))
        uvd.phase_to_time(Time(phs_time, format='jd', scale='utc')

        print ('Converting {} to {}'.format(self, self.ms))    
        # converting to uvfits
        uvfits_name = self + '.uvfits'
        uvd.write_uvfits(uvfits_name, spoof_nonessential=True)
        
        # converting to mset
        ct.uvfits2ms(uvfits, outfile=self.ms)
 
    def imaging(self, imagename, antenna='', cellsize='8arcmin', npix=512, niter=0, threshold='0Jy', weigthing='uniform', start=200, stop=900, uvlength=0):
        """
        Generates multi-frequency synthesized images using all baselines within the specified cutoff threshold
    
        Parameters
        ---------
        imagename: string
            Name of output casa image

        antenna: string
            Antenna(s) or baseline(s) to used for imaging.
            e.g antenna='0' uses data from antenna 0 only
            antenna='0,4,5' uses data from antennas 0,4 and 5
            antenna='0&3' uses data from baseline 0-3
            antenna='0&3; 4&3' uses data from baselines 0-3 and 4-3
            Default is ''(all) which uses all the baselines

        cellsize: string
            Degrees to be contained in one pixel of the image.
            Default is 8 arcmins.

        npix: int
            Number of pixel the output image is along x(l) and y(m) axis.
            Default is 512.

        niter: integer
            Number of iterations to use for deconvolution. Default is 0.
            Hence, dirty images are generated by default.

        threshold: string
            Cleaning threshold in Jy or mJy. Default is 0 Jy.

        weighting: string
            Weighting to be using for gridding of uv points. Default is uniform.

        start: int
            Starting frequency channel. Default is 200.

        stop: int
            Stopping/endign frequency channel. Default is 900.

        uvlength: float
            Uv length in metres equal to or smaller to exclude while generating the image. Default is 0.
        """

        ct.imaging(self.ms, imagename, antenna=antenna, cellsize=cellsize, npix=npix, niter=niter, threshold=threshold, weighting=weighting, start=start, stop=stop, uvlength=uvlength)
        ct.exportfits(imagename)
        ct.remove_image(imagename)       

           
